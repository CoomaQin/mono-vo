#include "DBoW3/DBoW3.h"
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp> //特征点头文件
#include <iostream>
#include <vector>
#include <string>

using namespace cv;
using namespace std;

/***************************************************
 * 本节演示了如何根据前面训练的字典计算相似性评分
 * ************************************************/
int main(int argc, char **argv) {
    // read the images and database  
    cout << "reading database" << endl;
    DBoW3::Vocabulary vocab("../vocabulary.yml.gz");
    // DBoW3::Vocabulary vocab("./vocab_larger.yml.gz");  // use large vocab if you want: 
    if (vocab.empty()) {
        cerr << "Vocabulary does not exist." << endl;
        return 1;
    }
    cout << "reading images... " << endl;
    vector<Mat> images;
    // for (int i = 0; i < 10; i++) {
    //     string path = "../data/" + to_string(i + 1) + ".png";
    //     images.push_back(imread(path));
    // }

    string str[] = {"000453","000454", "000908", "001362", "001816", "002270", "002724", "003178", "003632", "004086", "004540"};
    vector<string> image_names(str, str + 11);
    for ( int i=0; i<image_names.size(); i++ )
    {
        string path = "../data/"+image_names[i]+".png";
        // cout << path << endl;
        images.push_back( imread(path) );
    }

    // NOTE: in this case we are comparing images with a vocabulary generated by themselves, this may lead to overfit.
    // detect ORB features
    cout << "detecting ORB features ... " << endl;
    Ptr<Feature2D> detector = ORB::create(); //默认图像500个特征点
    vector<Mat> descriptors;
    for (Mat &image:images) {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute(image, Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
    }

    // 函数 transform()计算出用先前字典来描述的单词向量，每个向量中元素的值要么是0，表示图像i中没有这个单词；要么是该单词的权重
    // we can compare the images directly or we can compare one image to a database 
    // images :
    cout << "comparing images with images " << endl;
    for (int i = 0; i < images.size(); i++) {
        DBoW3::BowVector v1;                  // BoW描述向量中含有每个单词的ID和权重，两者构成了整个稀疏的向量
        vocab.transform(descriptors[i], v1);  // descriptors[i]表示图像i中所有的ORB描述子集合
        for (int j = i; j < images.size(); j++) {
            DBoW3::BowVector v2;
            vocab.transform(descriptors[j], v2);
            double score = vocab.score(v1, v2); //比较两个向量时，DBoW3会为我们计算一个分数
            cout << "image " << i << " vs image " << j << " : " << score << endl;
        }
        cout << endl;
    }

    // or with database 
    //在进行数据库查询时，DBoW对上面的分数进行排序，给出最相似的结果
    cout << "comparing images with database " << endl;
    DBoW3::Database db(vocab, false, 0); // false = do not use direct index
    for (int i = 0; i < descriptors.size(); i++)
        db.add(descriptors[i]);
    cout << "database info: " << db << endl;
    for (int i = 0; i < descriptors.size(); i++) {
        DBoW3::QueryResults ret;
        db.query(descriptors[i], ret, 4);      // max result=4
        cout << "searching for image " << i << " returns " << ret << endl << endl;
    }
    cout << "done." << endl;
}

// todo
// 将得分存储起来，排序
// 排序得分最高，且 top1 / top1 > 3 相似性阈值
